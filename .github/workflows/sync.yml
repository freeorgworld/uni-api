name: 自动同步更新上游仓库
on:
  schedule:
    - cron: '0 8 */3 * *' # 每3天 北京时间 0 点同步
  workflow_dispatch: # 允许手动触发
jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 为 GITHUB_TOKEN 授予写入权限
    steps:
      - name: Checkout 代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ github.token }}
      - name: 添加上游仓库
        run: git remote add upstream https://github.com/zhangtyzzz/uni-api.git  # 关键地址，记得修改
      - name: 获取上游更新
        run: git fetch upstream
      - name: 检测上游默认分支
        id: upstream-branch
        run: |
          DEFAULT_BRANCH=$(git remote show upstream | grep "HEAD branch" | sed 's/.*: //')
          echo "default_branch=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT
      - name: 检测同步文件（如 sync.yml 或 改名后的文件）
        id: sync-file-detection
        run: |
          # 查找 .github/workflows 中的文件，检查文件内容
          sync_file=$(grep -l '自动同步更新上游仓库' .github/workflows/* | head -n 1)
        
          if [ -z "$sync_file" ]; then
            echo "没有找到用于同步的工作流文件" >&2
            exit 1
          else
            echo "检测到同步工作流文件: $sync_file"
            echo "sync_file=$sync_file" >> $GITHUB_OUTPUT
          fi
      - name: 合并上游更改（保留自定义同步文件并保持每个文件的最后提交信息）
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # 获取上游默认分支
          UPSTREAM_BRANCH="${{ steps.upstream-branch.outputs.default_branch }}"
          echo "上游默认分支: $UPSTREAM_BRANCH"
          
          # 获取同步文件路径
          sync_file_path=${{ steps.sync-file-detection.outputs.sync_file }}
          echo "同步文件路径: $sync_file_path"
          
          # 创建临时目录存储当前工作流文件
          mkdir -p temp_workflows
          cp "$sync_file_path" temp_workflows/ || echo "无法复制同步文件，可能不存在"
          
          # 获取上游和本地的差异文件列表（使用 -z 选项处理特殊字符）
          git diff --name-only -z HEAD upstream/$UPSTREAM_BRANCH | tr '\0' '\n' > changed_files.txt
          
          # 为每个文件创建独立的提交
          while IFS= read -r file; do
            # 跳过空行
            if [ -z "$file" ]; then
              continue
            fi
            
            # 跳过工作流目录中的文件，但保留同步文件
            if [[ "$file" == .github/workflows/* ]] && [[ "$file" != "$sync_file_path" ]]; then
              echo "跳过工作流文件: $file"
              continue
            fi
            
            echo "处理文件: $file"
            
            # 确保目录存在
            dir_name=$(dirname "$file")
            if [ ! -d "$dir_name" ]; then
              mkdir -p "$dir_name"
            fi
            
            # 获取该文件在上游的最后一次提交信息
            COMMIT_MSG=$(git log -1 --pretty=format:"%s" upstream/$UPSTREAM_BRANCH -- "$file")
            
            # 如果没有获取到提交信息，使用默认信息
            if [ -z "$COMMIT_MSG" ]; then
              COMMIT_MSG="更新文件: $file"
            fi
            
            echo "文件提交信息: $COMMIT_MSG"
            
            # 从上游检出该文件（使用正确的路径格式）
            git checkout upstream/$UPSTREAM_BRANCH -- "$file" || echo "无法检出文件 $file，可能不存在于上游"
            
            # 添加并提交单个文件
            git add "$file" || echo "无法添加文件 $file"
            git commit -m "$COMMIT_MSG" || echo "无法为 $file 创建提交，可能没有更改"
          done < changed_files.txt
          
          # 恢复自定义的同步文件
          if [ -d "temp_workflows" ]; then
            cp -f temp_workflows/* .github/workflows/ 2>/dev/null || echo "无同步文件需要恢复"
            rm -rf temp_workflows
          fi
          
          # 检查是否有工作流文件变更
          git add .github/workflows/
          git diff --staged --quiet .github/workflows/ || git commit -m "同步工作流文件"
          
      - name: 获取当前仓库默认分支
        id: local-branch
        run: |
          DEFAULT_BRANCH=$(git remote show origin | grep "HEAD branch" | sed 's/.*: //')
          echo "default_branch=$DEFAULT_BRANCH" >> $GITHUB_OUTPUT
      - name: 推送更新
        run: |
          git push origin ${{ steps.local-branch.outputs.default_branch }}
